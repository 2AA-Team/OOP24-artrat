/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unibo.sampleapp;

import java.io.IOException;
import java.nio.charset.Charset;
import java.security.GeneralSecurityException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Locale;
import java.util.Optional;
import java.util.stream.Stream;

import org.apache.commons.lang3.tuple.Pair;

import com.omertron.omdbapi.OMDBException;
import com.omertron.omdbapi.OmdbApi;
import com.omertron.omdbapi.emumerations.ResultType;
import com.omertron.omdbapi.model.OmdbVideoBasic;
import com.omertron.omdbapi.tools.OmdbBuilder;
import com.diffplug.common.base.Errors;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.books.v1.Books;
import com.google.api.services.books.v1.BooksRequestInitializer;

public class App {
    private static final String DEFAULT_AUTHOR = "Dostoevskij";
    private static final String GOOGLE_BOOKS_API_KEY = System.getenv("GOOGLE_BOOKS_API_KEY");
    private static final String OMBD_API_KEY = System.getenv("GOOGLE_BOOKS_API_KEY");
    
    public static void main(String[] args) throws IOException, OMDBException, GeneralSecurityException {
        final OmdbApi omdb = new OmdbApi(OMBD_API_KEY);
        
        new Books.Builder(GoogleNetHttpTransport.newTrustedTransport(), JacksonFactory.getDefaultInstance(), null)
            .setApplicationName("sample-gradle-app")
            .setGoogleClientRequestInitializer(new BooksRequestInitializer(GOOGLE_BOOKS_API_KEY))
            .build() 
            // 0. Here we get a Books object (API faÃ§ade)
            .volumes().list("inauthor: " + Arrays.stream(args).findFirst().orElseGet(()->DEFAULT_AUTHOR))
            .execute().getItems().stream()
            .map(v -> v.getVolumeInfo().getTitle())
            // 1. Here we get a stream of book titles
            .flatMap(Errors.rethrow().<String,Stream<Pair<String,String>>>wrap(title -> Optional.ofNullable(
                        omdb.search(new OmdbBuilder().setSearchTerm(title).setResultType(ResultType.ALL).build()).getResults()
                       ).map(r -> r.stream().map(m -> Pair.of(m.getTitle(), m.getYear()))).orElseGet(() -> Stream.empty())
            ))
            // 2. Here we get a stream of movies as pairs (title, year)
            .distinct().sorted(Comparator.comparing(Pair::getRight))
            // 3. Here we process results by omitting duplicates and sorting them before printing them
            .forEach(System.out::println);
    }
}
